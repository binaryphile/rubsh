$(require keywords)

class Object
  def class << '  end'
    __=${__classh[$1]}
    __=$(declare -p __)
    __=${__#*=}
    __classh[__]=String
  end

  def methods <<'  end'
    local self=$1
    local inherited=${2-true}
    local class=${__classh[$self]}
    local methods=()

    case $inherited in
      'false' ) ;;
      'true'  )
        methods=( ${__methodsh[$class]} )
        while [[ -n ${__superh[$class]-} ]]; do
          class=${__superh[$class]}
          methods+=( ${__methodsh[$class]} )
        done
        ;;
      * ) return 1;;
    esac
    __inspect methods
    eval __a="$__"
    __=__a
    __classh[__]=Array
  end

  def puts <<'  end'
    { declare -f "$1" >/dev/null 2>&1 && [[ " ${!__classh[*]} " == *" $1 "* ]] ;} && {
      (( $# == 1 )) && { "$1" .to_s; printf '%s\n' "$__"; return ;}
      "$@"
      printf '%s\n' "$__"
      return
    }
    printf '%s\n' "$@"
    __=''
    __classh[__]=String
  end
rubend

# vim: ft=sh
