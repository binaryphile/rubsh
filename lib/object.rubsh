$(require init      )
$(require bootstrap )

class Object
  def class << '  end'
    __=${__classh[$1]}
    __=$(declare -p __)
    __=${__#*=}
    __classh[__]=String
  end

  def methods <<'  end'
    local self=$1
    local inherited=${2-true}
    local class=${__classh[$self]}
    local methods=()

    case $inherited in
      'false' ) ;;
      'true'  )
        methods=( ${__methodsh[$class]} )
        while [[ -n ${__superh[$class]-} ]]; do
          class=${__superh[$class]}
          methods+=( ${__methodsh[$class]} )
        done
        ;;
      * ) return 1;;
    esac
    __inspect methods
    eval __a="$__"
    __=__a
    __classh[__]=Array
  end

  def puts <<'  end'
    { declare -f "$1" >/dev/null 2>&1 && [[ " ${!__classh[*]} " == *" $1 "* ]] ;} && {
      (( $# == 1 )) && { "$1" .to_s; printf '%s\n' "$__"; return ;}
      "$@"
      printf '%s\n' "$__"
      return
    }
    printf '%s\n' "$@"
    __=''
    __classh[__]=String
  end
rubend

class Class
  def ancestors <<'  end'
    local class=$1
    local ancestors=( $class )

    while [[ -n ${__superh[${!class}]:-} ]]; do
      class=${__superh[${!class}]}
      [[ ${!class} != __* ]] && ancestors+=( "$class" )
    done
    __inspect ancestors
    __classh[__]=Array
  end

  def declare <<'  end'
    local class=$1
    local self=$2; shift 2
    local value=${1-}
    local format

    value=$(declare -p value)
    value=${value#*=}
    case $class in
      'Array' ) printf 'eval declare -a %s=%s; %s .new %s\n' "$self" "${value:1:-1}" "$class" "$self" ;;
      'Hash'  ) printf 'eval declare -A %s=%s; %s .new %s\n' "$self" "${value:1:-1}" "$class" "$self" ;;
      *       ) printf 'eval declare -- %s=%s; %s .new %s\n' "$self" "$value"        "$class" "$self" ;;
    esac
    __=$value
    __classh[__]=String
  end

  def instance_methods <<'  end'
    local class=$1
    local inherited=${2:-true}

    eval "local instance_methods=( \${!__${!class}_methodsh[@]} )"

    case $inherited in
      'false' ) ;;
      'true'  )
        while [[ -n ${__superh[${!class}]:-} ]]; do
          class=${__superh[${!class}]}
          eval "instance_methods+=( \${!__${!class}_methodsh[@]} )"
        done
        ;;
      * ) return 1;;
    esac
    __inspect instance_methods
    __classh[__]=Array
  end

  def new <<'  end'
    local class=$1
    local self=$2; shift 2
    local value=${1:-}
    local -n methods
    local format
    local method
    local stdout
    local statement

    __id_from_class "$self"
    eval "$self=$__"
    printf -v statement 'function %s { __dispatch "$@" ;}' "$self"
    eval "$statement"
    [[ $class == 'Class' ]] && __superh[${!self}]=Object
    __classh[${!self}]=$class
    __=''
    [[ -z $value ]] && return
    declare -f "$value" >/dev/null 2>&1 && {
      "$@"
      value=$__
    }
    case $value in
      '('* ) format='%s=%s';;
         * ) format='%s=%q';;
    esac
    printf -v statement "$format" "$self" "$value"
    eval "$statement"
    printf -v statement 'function __ { %s ;}' "${__method_bodyh[class#instance_methods]}"
    eval "$statement"
    __ "$self"
    methods=__
    for method in "${methods[@]}"; do
      printf -v statement 'function %s { __dispatch "$@" ;}' "$method"
      eval "$statement"
    done
    __=$value
    __classh[__]=String
  end

  def superclass <<'  end'
    local class=$1

    __=\"${__superh[$class]-}\"
    __classh[__]=String
  end
rubend

# vim: ft=sh
