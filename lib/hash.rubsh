class Hash : Object; {
  def = <<'  end'
    local -n __self=$1; shift
    local statement

    { declare -f "$1" >/dev/null 2>&1 && [[ " ${!__classh[*]} " == *" $1 "* ]] ;} && {
      "$@"
      eval __self="$__"
      return
    }
    eval __self="$1"
    __=$1
    __classh[__]=String
  end

  def inspect <<'  end'
    __=$(declare -p "$1" 2>/dev/null) || return
    __=${__#*=}
    __=${__:1:-1}
    __classh[__]=Hash
  end

  def map <<'  end'
    local -n __valh=$1
    local __keyparm=$3
    local __valparm=$4
    local __lambda=${5-$(</dev/stdin)}
    local "$__keyparm"
    local "$__valparm"
    local __key
    local __retvals=()
    local __statement

    [[ $2 == 'do' ]] && __lambda=${__lambda#${__lambda%%[![:space:]]*}}
    printf -v __statement '__retvals+=( "$(puts "%s")" )' "$__lambda"

    for __key in "${!__valh[@]}"; do
      printf -v "$__keyparm" '%s' "$__key"
      printf -v "$__valparm" '%s' "${__valh[$__key]}"
      eval "$__statement"
    done

    __inspect __retvals
    __classh[__]=Array
  end

  def to_s <<'  end'
    __=$(declare -p "$1" 2>/dev/null) || return
    __=${__#*=}
    __=${__:1:-1}
    __classh[__]=String
  end
}

# vim: ft=sh
