# $(require eval      )
# $(require st        )
# $(require variable  )

unset -v __stack
__stack=( __top_self )
declare -Ag __methodsh=()
declare -Ag __method_bodyh=()

class () {
  __stack+=( "${__class:-}" )
  __class=$1    # not local
  self=$__class # not local
  local super=${3:-Object}
  local class=$__class        # reduce underscore madness
  local id
  local statement
  local super_id

  [[ -z ${2:-}  || $2 == ':' ]] || return
  [[ -n ${2:-}  ]] && {
    [[ -z ${__classesh[$id]:-}        ]] || return
    [[ -n ${__classesh[$super_id]:-}  ]] || return
  }
  __id_from_class "$class"
  id=$__
  __id_from_class "$super"
  super_id=$__
  __superh[$id]=$super
  __superh["$id"_singleton]=__$super
  printf -v statement 'function %s { __dispatch "$@" ;}' "$class"
  eval "$statement"
  eval "$class=$id"
  __classh[$id]=__$class
  eval __"$class=$id"_singleton
  __classh["$id"_singleton]=__$class
  __classesh[$id]=1
  declare -Ag "__${id}_methodsh=()"
  __=''
  __classh[__]=String
}

def () {
  local method=$1
  local body=${2-$(</dev/stdin)}
  local class=$__class
  local id

  __id_from_class $class
  id=$__
  eval __"$id"_methodsh["$method"]=1
  declare -p __"$method"_classesh >/dev/null 2>&1 || declare -Ag "__${method}_classesh=()"
  eval __"$method"_classesh[$id]=1
  __method_bodyh[$id#$method]=$body
  __=''
  __classh[__]=String
}

rubend () {
  __class=${__stack[-1]}
  unset -v __stack[-1]
  self=$__class
}

__id_from_class () {
  local class=$1
  local capitals=()
  local char
  local i
  local j
  local id

  for (( i = 1; i < ${#class}; i++ )); do
    char=${class:i:1}
    [[ ${char^} == "$char" ]] && capitals+=( "$i" )
  done
  class=${class,,}
  (( ! ${#capitals[@]} )) && { __=$class; return ;}
  i=${capitals[0]}
  id=${class:0:i}
  for j in "${capitals[@]:1}"; do
    id+=_${class:i:j-i}
    i=$j
  done
  id+=_${class:i}
  __=$id
}

# vim: ft=sh
