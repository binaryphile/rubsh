clear_vars () {
  local -n __vars=$1

  unset -v "${__vars[@]}"
}

declare_hashes () {
  local -n __vars=$1
  local __var

  for __var in "${__vars[@]}"; do
    [[ $__var == *h ]] && declare -Ag "$__var"
  done
}

__dispatch () {
  local method=${1-.inspect}; shift ||:
  local self=${FUNCNAME[1]}
  local class=${__classh[$self]}
  local i
  local rest=()
  local statement

  [[ $method != '.'* ]] && {
    case $method in
      '=' ) method=.=;;
      *   )
        case ${1-} in
          '='   ) set -- "$method" "${@:2}"; method=.new     ;;
          ':='  ) set -- "$method" "${@:2}"; method=.declare ;;
          * )
            [[ $class == 'Class' ]] || return
            $("$self" .declare anon "$method")
            anon "$@"
            return
            ;;
          * ) return 1;;
        esac
        ;;
    esac
  }
  method=${method#.}
  while [[ ${__method_classesh[$method]} != *" $class "* ]]; do
    [[ -n ${__superh[$class]-} ]] || return
    class=${__superh[$class]}
  done
  [[ -n ${__method_bodyh[$class.$method]-} ]] || return
  [[ ${1-} == '{' ]] && {
    for (( i = 1; i <= $#; i++ )); do
      [[ ${!i} == '}' ]] && break;
    done
    [[ ${!i} == '}' ]] || return
    rest=( "${@:i+1}" )
    set -- "${@:2:i-2}"
  }
  printf -v statement 'function __ { %s ;}; __ "$self" "$@"' "${__method_bodyh[$class.$method]}"
  eval "$statement"
  ! (( ${#rest[@]} )) && return
  "${__classh[__]}" "$__" "${rest[@]}"
}

glob () {
  case $1 in
    'on'  ) set +f;;
    'off' ) set -f;;
    *     ) return 1;;
  esac
}

__inspect () {
  __=$(declare -p "$1" 2>/dev/null) || return
  __=${__#*=}
  __=${__#\'}
  __=${__%\'}
}

return_if_sourced () { echo 'eval return 0 2>/dev/null ||:' ;}

rubsh_cleanup () {
  local functions=(
    clear_vars
    declare_hashes
    rubsh_cleanup
    rubsh_initialize
  )

  unset -f "${functions[@]}"
}

rubsh_initialize () {
  local vars

  glob off

  vars=(
    __
    __class
    __classh
    __features
    __method_bodyh
    __method_classesh
    __methodsh
    __superh
  )
  clear_vars      vars
  declare_hashes  vars
}

# vim: ft=sh
